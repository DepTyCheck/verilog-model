---
name: Build and test

on:
  push:
    branches:
      - main
      - master
    tags:
      - '**'
  pull_request:
    branches:
      - main
      - master
  schedule:
    - cron: '0 1 * * *'

permissions: read-all

concurrency:
  group: ${{ github.workflow }}@${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  PACK_DIR: /root/.pack
  GENERATION_DIR: 'generated-modules'

jobs:

  get-upstream-matrix:
    name: Acquire matrix of upstream modes
    runs-on: ubuntu-latest
    container: ghcr.io/stefan-hoeck/idris2-pack:latest
    outputs:
      upstream-matrix: "${{ steps.get-upstream-matrix.outputs.upstream-matrix }}"
    steps:
      - name: Install Git
        run: apt-get update && apt-get install git
      - name: Get upstream matrix
        id: get-upstream-matrix
        run: |
          CURR="$(idris2 --version | sed 's/.*-//')"
          MAIN="$(git ls-remote https://github.com/idris-lang/Idris2 main | head -c 9)"
          echo "Current: $CURR, bleeding edge: $MAIN"
          if [ "$CURR" == "$MAIN" ]; then
            echo 'upstream-matrix=["latest-pack-collection"]'
          else
            echo 'upstream-matrix=["latest-pack-collection", "bleeding-edge-compiler"]'
          fi >> "$GITHUB_OUTPUT"

  build-and-test:
    name: Build and test `${{ github.repository }}`
    needs: get-upstream-matrix
    timeout-minutes: 128
    runs-on: ubuntu-latest
    container: ghcr.io/stefan-hoeck/idris2-pack:latest
    outputs:
      artifact-id: generated-modules
    strategy:
      fail-fast: false
      matrix:
        upstream-mode: ${{ fromJSON(needs.get-upstream-matrix.outputs.upstream-matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # - name: Update `pack-db`
      #   run: pack update-db
      # - name: Switch to the latest compiler, if needed
      #   if: matrix.upstream-mode == 'bleeding-edge-compiler'
      #   run: |
      #     { echo; echo "[idris2]"; echo 'commit = "latest:main"'; } >> pack.toml
      #     pack fetch
      # - name: Switch to the latest collection
      #   run: pack switch latest
      # - name: Compute the package name
      #   run: |
      #     echo "package_name=$(sed -e 's|.*/||' -e 's/idris2\?-//' \
      #           <<< ${{ github.repository }})" >> "$GITHUB_ENV"
      # - name: Build `${{ env.package_name }}`
      #   run: pack build ${{ env.package_name }}
      # - name: Fix file system  ¯\_(ツ)_/¯
      #   run: |
      #     set -x +e
      #     pack run verilog-model --coverage mcov -n 1 --seed 0,1
      #     touch tests/printer/model-coverage/dummy
      #     touch tests/printer/create-dir/dummy
      # - name: Test `${{ env.package_name }}`
      #   run: pack test ${{ env.package_name }}
      # - name: Gen SystemVerilog modules
      #   if: matrix.upstream-mode == 'latest-pack-collection'
      #   run : pack run ${{ env.package_name }} --to "${{ env.GENERATION_DIR }}" -n 128 --seed-name --seed-content --coverage mcov  # Generate modules
      # - name: Show mcov
      #   if: matrix.upstream-mode == 'latest-pack-collection'
      #   run : cat mcov
      - uses: actions/upload-artifact@v4
        if: matrix.upstream-mode == 'latest-pack-collection'
        with:
          name: generated-modules
          path: "${{ env.GENERATION_DIR }}"

  run-tools:
    name: ${{ matrix.tool.name }}
    needs: build-and-test
    timeout-minutes: 128
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tool:
          - name: icarus verilog
            repo: https://github.com/steveicarus/iverilog.git
            deps: autoconf autotools-dev bison flex libfl-dev gperf make gcc g++ cmake python3
            path: iverilog
            build: |
              sh autoconf.sh
              ./configure
              sudo make -j$(nproc)
            install: |
              sudo make install
            version: |
              iverilog -V
            run: |
              bash .github/workflows/compile_and_run.sh "$GENERATION_DIR" \
              "iverilog -g2012 -o a.out {file}" \
              "(error|sorry|assert): [\S ]+$" \
              "$IGNORED_ERRORS" \
              "vvp a.out" \
              "(error|sorry|vvp|assert): [\S ]+$"

          - name: slang
            repo: https://github.com/MikePopoloski/slang.git
            deps: cmake
            path: slang
            build: |
              sudo cmake -B build
              sudo cmake --build build -j$(nproc)
            install: |
              sudo cmake --install build --strip
            version: |
              slang --version
            run: |
              bash .github/workflows/compile_and_run.sh "$GENERATION_DIR" \
              "slang -Weverything {file}" \
              "error: [\S ]+$" \
              "$IGNORED_ERRORS" \
              "" \
              ""
            
          - name: verilator
            repo: https://github.com/verilator/verilator.git
            deps: autoconf autotools-dev bison flex help2man libfl-dev libelf-dev cmake
            path: verilator
            build: |
              autoconf
              ./configure
              make -j$(nproc)
            install: |
              sudo make install
            version: |
              verilator --version
            run: |
              bash .github/workflows/compile_and_run.sh "$GENERATION_DIR" \
              "rm -rf obj_dir && rm -f top.sv && cp {file} top.sv && verilator --cc --exe .github/workflows/verilator_testbench.cpp --timing -Wno-fatal +1800-2023ext+sv top.sv" \
              "%Error(|\-[A-Z]+):( | Internal Error: )[A-z0-9-_\/]+.sv:\d+:\d+:[\S ]*$" \
              "$IGNORED_ERRORS" \
              "make -C obj_dir -f Vtop.mk Vtop && ./obj_dir/Vtop" \
              "%Error:[\S ]+$"

          - name: surelog
            repo: https://github.com/chipsalliance/Surelog.git
            deps: cmake gcc build-essential git pkg-config tclsh swig uuid-dev libgoogle-perftools-dev python3 python3-orderedmultidict python3-psutil python3-dev default-jre lcov zlib1g-dev
            path: surelog
            build: |
              git submodule update --init --recursive
              make -j$(nproc)
            install: |
              sudo make install
            version: |
              surelog --version
            run: |
              bash .github/workflows/compile_and_run.sh "$GENERATION_DIR" \
              "surelog -parse -nopython -sv {file}" \
              "" \
              "$IGNORED_ERRORS" \
              "" \
              ""
          
          - name: zachjs-sv2v
            repo: https://github.com/zachjs/sv2v.git
            deps: haskell-stack
            path: zachjs-sv2v
            build: |
              make -j$(nproc)
            install: |
              sudo stack install
            version: |
              sv2v --version
            run: |
              bash .github/workflows/compile_and_run.sh "$GENERATION_DIR" \
              "sv2v -v {file}" \
              "" \
              "$IGNORED_ERRORS" \
              "" \
              ""
          
          # - name: tree-sitter-systemverilog
          #   repo: https://github.com/gmlarumbe/tree-sitter-systemverilog.git
          #   deps: gcc
          #   path: tssv
          #   build: |
          #     cc -fPIC -c -I. src/parser.c
          #     cc -fPIC -shared *.o -o
          #   install: |
          #     echo "TODO"
          #   version: |
          #     echo "TODO"
          #   run: |
          #     bash .github/workflows/compile_and_run.sh "$GENERATION_DIR" \
          #     "sv2v -v {file}" \
          #     "" \
          #     "$IGNORED_ERRORS" \
          #     "" \
          #     ""

          - name: synling
            repo: https://github.com/chipsalliance/synlig.git
            deps: gcc-11 g++-11 build-essential cmake tclsh ant default-jre swig google-perftools libgoogle-perftools-dev python3 python3-dev python3-pip uuid uuid-dev tcl-dev flex libfl-dev git pkg-config libreadline-dev bison libffi-dev wget python3-orderedmultidict
            path: synling
            build: |
              git submodule sync
              git submodule update --init --recursive third_party/{surelog,yosys}
              make install -j$(nproc)
            install: |
              echo "synling installed"
            version: |
              synlig --version
            run: |
              bash .github/workflows/compile_and_run.sh "$GENERATION_DIR" \
              "synlig read_systemverilog {file}" \
              "" \
              "$IGNORED_ERRORS" \
              "" \
              ""

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Generated Files
        uses: actions/download-artifact@v4
        with:
          name: generated-modules
          path: "${{ env.GENERATION_DIR }}"
      - name: Update apt
        run: sudo apt update -qq
      - name: Clone tool
        run: |
          git clone ${{ matrix.tool.repo }} ${{ matrix.tool.path }}
          cd ${{ matrix.tool.path }}
          echo "commit_hash=$(git rev-parse HEAD)" >> $GITHUB_ENV
      - name: Restore from cache
        id: cache-build
        uses: actions/cache/restore@v4
        with:
          path: ${{ matrix.tool.path }}
          key: ${{ matrix.tool.name }}-cache-${{ env.commit_hash }}
      - name: Add bazel repo (if needed)
        if: ${{ contains(matrix.tool.deps, 'bazel') && steps.cache-build.outputs.cache-hit != 'true' }}
        run: |
          sudo apt -qq -y install apt-transport-https curl gnupg
          curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor > bazel.gpg
          chmod a+r bazel.gpg
          sudo mv bazel.gpg /etc/apt/trusted.gpg.d/
          sudo echo "deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list
          sudo apt update -qq
      - name: Install tool-specific dependencies (if needed)
        if: ${{ matrix.tool.deps && steps.cache-build.outputs.cache-hit != 'true' }}
        run: |
          sudo apt -qq -y install ${{ matrix.tool.deps }}
      - name: Setup Rust (if needed)
        if: ${{ matrix.tool.rust_ver && steps.cache-build.outputs.cache-hit != 'true' }}
        run: |
          sudo apt -y install curl
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > setup.sh
          sh setup.sh -y
          source $HOME/.cargo/env
          rustup install ${{ matrix.tool.rust_ver }}
          rustup default ${{ matrix.tool.rust_ver }}
      - name: Update haskell (if needed)
        if: ${{ contains(matrix.tool.deps, 'haskell') && steps.cache-build.outputs.cache-hit != 'true' }}
        run: |
          stack upgrade
      - name: Build tool
        if: steps.cache-build.outputs.cache-hit != 'true'
        run : |
          cd ${{ matrix.tool.path }}
          ${{ matrix.tool.build }}
      - name: Save build
        if: steps.cache-build.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ matrix.tool.path }}
          key: ${{ steps.cache-build.outputs.cache-primary-key }}
      - name: Install tool
        run : |
          cd ${{ matrix.tool.path }}
          ${{ matrix.tool.install }}
      - name: Print version
        run: ${{ matrix.tool.version }}
      - name: Run
        run : |
          set +e

          IGNORED_ERRORS=".github/workflows/error-patterns/${{ matrix.tool.path }}-ignored-errors.txt"

          ${{ matrix.tool.run }}

          EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ]; then
                exit 1
          fi

  create-issue-on-failure:
    name: Create an issue on failure
    if: ${{ always() && (contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')) && github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    needs: [get-upstream-matrix, build-and-test, run-tools]
    permissions:
      contents: read
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Read and Format Usernames
        run: |
          TAGGED_USERS=$(awk '{printf "@%s ", $0}' MAINTAINERS)
          echo "TAGGED_USERS=${TAGGED_USERS}" >> $GITHUB_ENV
      - name: Create Issue
        uses: actions/github-script@v7
        with:
          script: |
            const issueTitle = `Workflow Failed: ${context.workflow} #${context.runNumber}`;
            const issueBody = `
            Workflow Run: [${context.runNumber}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})

            Tagging: ${{ env.TAGGED_USERS }}

            Please check the logs for more details
            `;

            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
            });
