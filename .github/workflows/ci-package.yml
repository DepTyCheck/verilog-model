---
name: Build and test

on:
  push:
    branches:
      - main
      - master
    tags:
      - '**'
  pull_request:
    branches:
      - main
      - master
  schedule:
    - cron: '0 1 * * *'

permissions: read-all

concurrency:
  group: ${{ github.workflow }}@${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  PACK_DIR: /root/.pack
  GENERATION_DIR: 'generated-modules'

jobs:

  get-upstream-matrix:
    name: Acquire matrix of upstream modes
    runs-on: ubuntu-latest
    container: ghcr.io/stefan-hoeck/idris2-pack:latest
    outputs:
      upstream-matrix: "${{ steps.get-upstream-matrix.outputs.upstream-matrix }}"
    steps:
      - name: Install Git
        run: apt-get update && apt-get install git
      - name: Get upstream matrix
        id: get-upstream-matrix
        run: |
          CURR="$(idris2 --version | sed 's/.*-//')"
          MAIN="$(git ls-remote https://github.com/idris-lang/Idris2 main | head -c 9)"
          echo "Current: $CURR, bleeding edge: $MAIN"
          if [ "$CURR" == "$MAIN" ]; then
            echo 'upstream-matrix=["latest-pack-collection"]'
          else
            echo 'upstream-matrix=["latest-pack-collection" ]' # "bleeding-edge-compiler"
          fi >> "$GITHUB_OUTPUT"

  build-and-test:
    name: Build and test `${{ github.repository }}`
    needs: get-upstream-matrix
    runs-on: ubuntu-latest
    container: ghcr.io/stefan-hoeck/idris2-pack:latest
    outputs:
      artifact-id: generated-modules
    strategy:
      fail-fast: false
      matrix:
        upstream-mode: ${{ fromJSON(needs.get-upstream-matrix.outputs.upstream-matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Update `pack-db`
        run: pack update-db
      - name: Switch to the latest compiler, if needed
        if: ${{ matrix.upstream-mode == 'bleeding-edge-compiler' }}
        run: |
          { echo; echo "[idris2]"; echo 'commit = "latest:main"'; } >> pack.toml
          pack fetch
      - name: Switch to the latest collection
        run: pack switch latest
      - name: Compute the package name
        run: |
          echo "package_name=$(sed -e 's|.*/||' -e 's/idris2\?-//' \
                <<< ${{ github.repository }})" >> "$GITHUB_ENV"
      - name: Build `${{ env.package_name }}`
        run: pack build ${{ env.package_name }}
      # - name: Test `${{ env.package_name }}`
      #   run: pack test ${{ env.package_name }}
      - name: Gen SystemVerilog modules
        run : pack run ${{ env.package_name }} --to "${{ env.GENERATION_DIR }}" -n 3    # Generate modules
      - uses: actions/upload-artifact@v4
        id: generated-files-upload-step
        with:
          name: generated-modules
          path: "${{ env.GENERATION_DIR }}"


  test-with-iverilog:
    name: Test with Icarus Verilog
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Generated Files
        uses: actions/download-artifact@v4
        with:
          name: generated-modules
          path: "${{ env.GENERATION_DIR }}"
      - name: Install build tools
        run: apt update && apt install -y autoconf gperf make gcc g++ bison flex cmake python3
      - name: Set up iverilog
        run: |
          rm -rf iverilog
          git clone https://github.com/steveicarus/iverilog.git
          cd iverilog
          sh autoconf.sh
          ./configure
          make -j$(nproc)
          make install
      - name: Compile with Icarus Verilog
        run: |
          for FILE in "$TESTS"/*.sv; do
            echo "Compiling $FILE"

            COMPILATION_OUTPUT=$(iverilog -g2012 "$FILE" 2>&1)
            EXIT_CODE=$?

            echo "Exit code: $EXIT_CODE. Output:"
            echo "$COMPILATION_OUTPUT"

            if [ $EXIT_CODE -ne 0 ]; then
              .github/workflows/filter_errors.sh "$COMPILATION_OUTPUT" ".github/workflows/iverilog-errors.txt"
            fi
            echo "---------------------------------------------"
          done
          # for FILE in "${{ env.GENERATION_DIR }}"/*.sv; do
          #   echo "Compiling $FILE"

          #   COMPILATION_OUTPUT=$(iverilog -g2012 "$FILE" 2>&1)
          #   EXIT_CODE=$?

          #   echo "Output:"
          #   echo "$COMPILATION_OUTPUT"
          #   echo "$EXIT_CODE"

          #   if [ $EXIT_CODE -ne 0 ]; then
          #     echo "Compilation failed for $FILE"
          #     ./.github/workflows/filter_errors.sh "$EXIT_CODE" "./.github/workflows/iverilog-errors.txt"
          #   fi

          #   # echo "Running $FILE"
          #   # vvp a.out
          #   # if [ $? -ne 0 ]; then
          #   #   echo "Error: Execution failed for $FILE"
          #   #   exit 1
          #   # fi

          #   echo "---------------------------------------------"
          # done

  # test-with-slang:
  #   name: Test with Slang
  #   needs: build-and-test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download Generated Files
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: generated-modules
  #         path: ${{ env.GEN_DIR }}
  #     - name: Install build tools
  #       run: apt update && apt install -y autoconf gperf make gcc g++ bison flex cmake python3
  #     - name: Set up slang
  #       run: |
  #         git clone https://github.com/MikePopoloski/slang.git
  #         cd slang
  #         cmake -B build
  #         cmake --build build -j$(nproc)
  #         cmake --install build --strip
  #     - name: Compile with Slang
  #       run: |
  #         for FILE in ${{ env.GEN_DIR }}/*.sv; do
  #           echo "Compiling $FILE"

  #           COMPILATION_OUTPUT=$(slang -Weverything "$FILE" 2>&1)
  #           COMPILATION_STATUS=$?

  #           echo "Output:"
  #           echo "$COMPILATION_OUTPUT"

  #           if [ $COMPILATION_STATUS -ne 0 ]; then
  #             echo "Compilation failed for $FILE"
  #             exit 1
  #             # ./.github/workflows/filter_errors.sh "$COMPILATION_OUTPUT" "iverilog-errors.txt"
  #           fi
  #         done

  # test-with-verilator:
  #   runs-on: ubuntu-latest
  #   needs: build-and-test
  #   steps:
      # - name: Set up verilator
      #   run: |
      #     apt install -y perl help2man libfl2 libfl-dev zlib1g zlib1g-dev     # libgz zlibc
      #     rm -rf verilator
      #     git clone https://github.com/verilator/verilator   # Only first time
      #     cd verilator
      #     # git checkout master      # Use development branch (e.g. recent bug fixes)
      #     git checkout stable      # Use most recent stable release

      #     autoconf
      #     ./configure
      #     make -j$(nproc)
      #     make install
