---
name: Build and test

on:
  push:
    branches:
      - main
      - master
    tags:
      - '**'
  pull_request:
    branches:
      - main
      - master
  schedule:
    - cron: '0 1 * * *'

permissions: read-all

concurrency:
  group: ${{ github.workflow }}@${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  PACK_DIR: /root/.pack
  GENERATION_DIR: 'generated-modules'

jobs:

  get-upstream-matrix:
    name: Acquire matrix of upstream modes
    runs-on: ubuntu-latest
    container: ghcr.io/stefan-hoeck/idris2-pack:latest
    outputs:
      upstream-matrix: "${{ steps.get-upstream-matrix.outputs.upstream-matrix }}"
    steps:
      - name: Install Git
        run: apt-get update && apt-get install git
      - name: Get upstream matrix
        id: get-upstream-matrix
        run: |
          CURR="$(idris2 --version | sed 's/.*-//')"
          MAIN="$(git ls-remote https://github.com/idris-lang/Idris2 main | head -c 9)"
          echo "Current: $CURR, bleeding edge: $MAIN"
          if [ "$CURR" == "$MAIN" ]; then
            echo 'upstream-matrix=["latest-pack-collection", "latest-pack-collection"]'
          else
            echo 'upstream-matrix=["latest-pack-collection", "bleeding-edge-compiler"]'
          fi >> "$GITHUB_OUTPUT"

  build-and-test:
    name: Build and test `${{ github.repository }}`
    needs: get-upstream-matrix
    runs-on: ubuntu-latest
    container: ghcr.io/stefan-hoeck/idris2-pack:latest
    outputs:
      artifact-id: generated-modules
    strategy:
      fail-fast: false
      matrix:
        upstream-mode: ${{ fromJSON(needs.get-upstream-matrix.outputs.upstream-matrix) }}
    concurrency:
      group: consecutive-matrix
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Update `pack-db`
        run: pack update-db
      - name: Switch to the latest compiler, if needed
        if: ${{ matrix.upstream-mode == 'bleeding-edge-compiler' }}
        run: |
          { echo; echo "[idris2]"; echo 'commit = "latest:main"'; } >> pack.toml
          pack fetch
      - name: Switch to the latest collection
        run: pack switch latest
      - name: Compute the package name
        run: |
          echo "package_name=$(sed -e 's|.*/||' -e 's/idris2\?-//' \
                <<< ${{ github.repository }})" >> "$GITHUB_ENV"
      - name: Build `${{ env.package_name }}`
        run: pack build ${{ env.package_name }}
      - name: DEBUG
        run: date
      - name: DEBUG2
        run: pwd
      - name: Test `${{ env.package_name }}`
        run: pack test ${{ env.package_name }}
      - name: Gen SystemVerilog modules
        run : pack run ${{ env.package_name }} --to "${{ env.GENERATION_DIR }}" -n 42    # Generate modules
      - uses: actions/upload-artifact@v4
        if: ${{ matrix.upstream-mode == 'latest-pack-collection' }}
        with:
          name: generated-modules
          path: "${{ env.GENERATION_DIR }}"


  test-with-iverilog:
    name: Test with Icarus Verilog
    needs: build-and-test
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Generated Files
        uses: actions/download-artifact@v4
        with:
          name: generated-modules
          path: "${{ env.GENERATION_DIR }}"
      - name: Install build tools
        run: sudo apt update && sudo apt install -y autoconf gperf make gcc g++ bison flex cmake python3
      - name: Set up iverilog
        run: |
          rm -rf iverilog
          git clone https://github.com/steveicarus/iverilog.git
          cd iverilog
          sh autoconf.sh
          ./configure
          sudo make -j$(nproc)
          sudo make install
      - name: Run Icarus Verilog
        run: |
          set +e
          bash .github/workflows/compile_and_run.sh "${{ env.GENERATION_DIR }}" \
            "iverilog -g2012 {file} -o a.out" \
            "(error|sorry): [\S ]+$" \
            ".github/workflows/iverilog-ignored-errors.txt" \
            "vvp a.out" \
            "(error|sorry): [\S ]+$"

          EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ]; then
                exit 1
          fi

  test-with-slang:
    name: Test with Slang
    needs: build-and-test
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Generated Files
        uses: actions/download-artifact@v4
        with:
          name: generated-modules
          path: "${{ env.GENERATION_DIR }}"
      - name: Clone Slang Repository
        run: git clone https://github.com/MikePopoloski/slang.git
      - name: Cache Slang Build
        id: cache-slang-build
        uses: actions/cache/restore@v4
        with:
          path: slang/build
          key: ${{ runner.os }}-slang-cache-${{ hashFiles('slang/CHANGELOG.md') }}
      - name: Install build tools
        if: ${{ steps.cache-slang-build.outputs.cache-hit != 'true' }}
        run: sudo apt update && sudo apt install -y autoconf gperf make gcc g++ bison flex cmake python3
      - name: Build Slang
        if: ${{ steps.cache-slang-build.outputs.cache-hit != 'true' }}
        run: |
          cd slang
          sudo cmake -B build
          sudo cmake --build build -j$(nproc)
      - name: Save Slang build
        if: ${{ steps.cache-slang-build.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v4
        with:
          path: slang/build
          key: ${{ steps.cache-slang-build.outputs.cache-primary-key }}
      - name: Install Slang
        run: |
          cd slang
          sudo cmake --install build --strip
      - name: Run Slang
        run: |
          set +e
          bash .github/workflows/compile_and_run.sh "${{ env.GENERATION_DIR }}" \
            "slang -Weverything {file}" \
            "error: [\S ]+$" \
            ".github/workflows/slang-ignored-errors.txt" \
            "" \
            ""

          EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ]; then
                exit 1
          fi

  test-with-verilator:
    name: Test with Verilator
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 20
    container:
      image: verilator/verilator
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Generated Files
        uses: actions/download-artifact@v4
        with:
          name: generated-modules
          path: "${{ env.GENERATION_DIR }}"
      - name: Run verilator
        run: |
          set +e
          bash .github/workflows/compile_and_run.sh "${{ env.GENERATION_DIR }}" \
            "rm -rf obj_dir && rm -f top.sv && cp {file} top.sv && verilator --cc --exe .github/workflows/testbench.cpp --trace --timing -Wno-fatal +1800-2023ext+sv top.sv" \
            "%Error(|\-[A-Z]+): [A-z0-9-_\/]+.sv:\d+:\d+:[\S ]*$" \
            ".github/workflows/verilator-ignored-errors.txt" \
            "make -C obj_dir -f Vtop.mk Vtop && ./obj_dir/Vtop" \
            "%Error:[\S ]+$"

          EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ]; then
                exit 1
          fi

  create-issue-on-failure:
    name: Create an issue on failure
    if: ${{ always() && contains(needs.*.result, 'failure') && github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    needs: [get-upstream-matrix, build-and-test, test-with-iverilog, test-with-slang, test-with-verilator]
    permissions:
      contents: read
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Read and Format Usernames
        run: |
          TAGGED_USERS=$(awk '{printf "@%s ", $0}' MAINTAINERS)
          echo "TAGGED_USERS=${TAGGED_USERS}" >> $GITHUB_ENV
      - name: Create Issue
        uses: actions/github-script@v7
        with:
          script: |
            const issueTitle = `Workflow Failed: ${context.workflow} #${context.runNumber}`;
            const issueBody = `
            Workflow Run: [${context.runNumber}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})

            Tagging: ${{ env.TAGGED_USERS }}

            Please check the logs for more details
            `;

            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
            });
