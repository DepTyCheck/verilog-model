stage: synthesis
tool: synlig
id: signal_with_non_constant_width
title: Signal with non-constant width!
regex: >
  Signal .* with non-constant width
issue_status: reported
issue_link: https://github.com/chipsalliance/synlig/issues/2772#issuecomment-3146510179
examples:
  - signal_with_non_constant_width_v1:
      first_found: 21.07.2025
      full_error: >
        ERROR: Signal `\khbfhwajrd' with non-constant width!
      minified_error: >
        ERROR: Signal `\b' with non-constant width!
      minified_example: |
        module a (output bit [0:0][0:0] b [0:0]);
        endmodule: a
      full_example: |
        module pxcr
          ( output trior logic [3:0] vgbqkkfhwt
          , output wor logic [3:1][3:2][0:1] efdwbjjy [4:1][3:1][4:1]
          , output bit [2:0][3:3] t
          , input logic [1:2][3:4] uapi [3:0]
          , input uwire logic [3:3][0:3] quoepegllr
          );

          not thbjs(olzr, hits);

          // Top inputs -> top outputs assigns

          // Single-driven assigns
          assign vgbqkkfhwt = 'bx;
          assign hits = 'b1;
          assign efdwbjjy = '{'{'{'bz,'b0,'bx,'bz},'{'b1,'b1,'b0,'bz},'{'bx,'b0,'bx,'bz}},'{'{'b1,'bz,'b0,'b1},'{'bz,'b0,'bx,'bx},'{'bz,'bx,'bz,'bx}},'{'{'bz,'bx,'bz,'bx},'{'b1,'bz,'bz,'bx},'{'b0,'bx,'bz,'bx}},'{'{'bz,'bz,'b1,'b0},'{'b0,'b1,'b0,'b1},'{'bx,'bx,'bz,'bz}}};
          assign t = 'b1;

          // Multi-driven assigns
          assign vgbqkkfhwt = 'bx;
          assign efdwbjjy = '{'{'{'b1,'b1,'b1,'b0},'{'bz,'bz,'bz,'bz},'{'bz,'bz,'b0,'bz}},'{'{'bx,'b1,'b0,'bx},'{'b1,'b0,'b1,'b1},'{'b0,'bx,'b0,'b1}},'{'{'bx,'b0,'b0,'bz},'{'bz,'bx,'b1,'bx},'{'b1,'bz,'b1,'bx}},'{'{'bx,'bz,'b1,'b1},'{'bx,'b1,'bz,'bz},'{'b1,'b1,'b1,'b0}}};
          assign efdwbjjy = '{'{'{'b1,'b0,'bx,'bx},'{'bx,'b1,'b0,'b0},'{'b1,'b1,'bx,'b1}},'{'{'bx,'b0,'b0,'b1},'{'b0,'b0,'bx,'bz},'{'b1,'b1,'b1,'bx}},'{'{'b0,'bz,'b1,'bz},'{'bz,'b1,'bx,'bz},'{'bx,'bz,'bz,'bz}},'{'{'b1,'bz,'bx,'b0},'{'b0,'b1,'bx,'b1},'{'b1,'b1,'b0,'b0}}};
        endmodule: pxcr

        module jsq
          (input supply0 logic [0:1][0:3] ptgosbvzwh [2:1][0:2], input logic [1:2][1:3][3:4] tkzrid);

          nand suqbueekkh(czebq, uds, czebq);

          not mznpoqdht(uds, thf);

          // Top inputs -> top outputs assigns

          // Single-driven assigns
          assign thf = 'b0;

          // Multi-driven assigns
          assign uds = 'b1;
        endmodule: jsq

        module xckxsms
          (output logic [2:1][2:0][3:2][0:0] ky, output reg [0:1] ryiguwk [1:2]);

          not x(ky, hko);

          // Top inputs -> top outputs assigns

          // Single-driven assigns
          assign ryiguwk = '{'b0,'b1};
          assign hko = 'b0;

          // Multi-driven assigns
        endmodule: xckxsms

        module sofw
          ( output bit [2:2][0:2] khbfhwajrd [2:1]
          , output wor logic [0:0][3:2][1:4] mirv
          , output bit [4:4] qnmvhcinz
          , output logic shqvk [2:1]
          , input trireg logic [0:3] nyn [1:2][0:2]
          , input wire logic [4:4][2:0][4:3][0:1] bi [3:1][4:2][3:4]
          , input reg [3:3][0:3][3:2] wc
          );

          reg [0:1] vvwc [1:2];

          xor qnr(auswsszzx, mirv, xbtii);

          not r(bthap, cmnguo);

          xckxsms wfvygnss(.ky(sjjfd), .ryiguwk(vvwc));
          // warning: implicit conversion of port connection truncates from 12 to 1 bits
          //   logic [2:1][2:0][3:2][0:0] ky -> wire logic sjjfd

          not htkdwu(mirv, auswsszzx);


          // Top inputs -> top outputs assigns

          // Single-driven assigns
          assign shqvk = '{'b0,'b0};

          // Multi-driven assigns
          assign sjjfd = 'b0;
          assign mirv = 'b1;
        endmodule: sofw
