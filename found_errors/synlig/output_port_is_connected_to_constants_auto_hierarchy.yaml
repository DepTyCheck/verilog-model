stage: HIERARCHY pass
tool: synlig
id: output_port_is_connected_to_constants_auto_hierarchy
title: >
  Port is connected to constants: { $auto$hierarchy.cc:1462:execute$6 1'0 }
regex: >
  Output port .* is connected to constants: { \$auto\$hierarchy\.cc:1462:execute\$6 1'0 }
examples:
  - output_port_is_connected_to_constants_auto_hierarchy_v1:
      first_found: 21.07.2025
      full_error: >
        ERROR: Output port udbjmldhub.llfhyxo.agrbxoods (sbp) is connected to constants: { $auto$hierarchy.cc:1462:execute$6 1'0 }
      full_example: |
        module sbp
          ( output triand logic [4:3] ohney
          , output reg [4:2][4:2][3:4][3:3] agrbxoods
          , output supply0 logic vkumvbjn
          , output supply1 logic x [3:3]
          , input bit [0:0][1:2] omfhsss
          , input triand logic g [0:1][1:0][4:2]
          , input reg l
          , input logic [0:1][2:0][3:3] ov
          );

          // Top inputs -> top outputs assigns
          
          // Single-driven assigns
          assign x = '{'b0};
          
          // Multi-driven assigns
          assign vkumvbjn = 'b1;
          assign x = '{'b1};
          assign g = '{'{'{'b0,'b0,'bz},'{'bx,'bz,'b0}},'{'{'b1,'b0,'bx},'{'b1,'bx,'b0}}};
          assign x = '{'b1};
        endmodule: sbp

        module udbjmldhub
          ( output tri1 logic zfrz [4:0]
          , output wire logic fdobyz
          , output bit [2:2][4:0] wgcmxprkh
          , output tri1 logic [2:1][2:4] pzg [2:0][0:2][1:0]
          , input wor logic [0:3] dkp
          , input supply0 logic s [3:1]
          , input tri0 logic ngbav
          , input logic [1:0] tb
          );
          
          triand logic biujcjgb [0:1][1:0][4:2];
          supply1 logic jmxmerdxfq [3:3];
          
          or vy(wo, uur, dpja);
          
          sbp llfhyxo( .ohney(uur)
                    , .agrbxoods(lp)
                    , .vkumvbjn(wgcmxprkh)
                    , .x(jmxmerdxfq)
                    , .omfhsss(dfwhdv)
                    , .g(biujcjgb)
                    , .l(cbe)
                    , .ov(kvsdekkba)
                    );
          // warning: implicit conversion of port connection truncates from 2 to 1 bits
          //   triand logic [4:3] ohney -> wire logic uur
          //
          // warning: implicit conversion of port connection truncates from 18 to 1 bits
          //   reg [4:2][4:2][3:4][3:3] agrbxoods -> wire logic lp
          //
          // warning: implicit conversion of port connection expands from 1 to 2 bits
          // warning: implicit conversion changes possible bit states from 4-state to 2-state
          //   wire logic dfwhdv -> bit [0:0][1:2] omfhsss
          //
          // warning: implicit conversion of port connection expands from 1 to 6 bits
          //   wire logic kvsdekkba -> logic [0:1][2:0][3:3] ov
          
          xor slclbvryk(cbe, ezpaxyxhig, cbe);

          // Top inputs -> top outputs assigns
          
          // Single-driven assigns
          
          // Multi-driven assigns
          assign cbe = 'b1;
          assign lp = 'b0;
          assign zfrz = '{'b1,'bx,'bz,'bx,'bz};
        endmodule: udbjmldhub

        module lq
          ( output wire logic [1:3][4:1][1:1][3:1] xooszipend [1:1][3:0][3:0][1:4]
          , output shortreal snjgo
          , output supply1 logic [0:2] i [1:0][2:0]
          , input tri1 logic [0:1][2:0][3:4] pwap [1:3][0:0][4:2][0:2]
          , input logic [2:1] shriue
          , input logic xpdlqs [1:0][4:4]
          , input wand logic [0:3] mymukcgfz [4:1][2:3]
          );
          
          
          or bhjx(kvvlmht, n, snjgo);
          
          not tke(n, snjgo);
          
          or fqlai(snjgo, efke, snjgo);
          
          
          // Top inputs -> top outputs assigns
          
          // Single-driven assigns
          assign i = '{'{'bz,'bz,'b1},'{'b1,'b0,'b1}};
          assign efke = 'b1;
          assign xooszipend = '{'{'{'{'b1,'b1,'bz,'bz},'{'bx,'b0,'bx,'b0},'{'b0,'b0,'b1,'b0},'{'b1,'b0,'bx,'b0}},'{'{'bx,'b1,'b0,'b0},'{'bz,'b0,'b1,'bx},'{'bx,'b1,'b0,'bz},'{'b0,'bz,'b1,'b0}},'{'{'b0,'bx,'bz,'bz},'{'bx,'b0,'bx,'b1},'{'b1,'b0,'bx,'b0},'{'b1,'bx,'b0,'b0}},'{'{'b1,'bx,'b1,'b0},'{'bz,'b0,'b1,'b1},'{'bz,'bz,'bx,'b0},'{'b0,'bz,'bx,'bx}}}};
          
          // Multi-driven assigns
        endmodule: lq
