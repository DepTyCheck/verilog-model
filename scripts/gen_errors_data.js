import fs from 'fs';
import path from 'path';
import { findYamlFiles, parseYamlFile } from './utils/yaml_utils.js';
import { prepareYamlInputs } from './utils/cli_utils.js';


// Function to generate TypeScript content
function generateTypeScriptContent(errors) {
  const validErrors = errors.filter(error => error !== null);
  
  return `// This file is auto-generated by scripts/gen_errors_data.js
// Do not edit manually

import type { FoundError } from '$lib/core';

export const allFoundErrors: FoundError[] = ${JSON.stringify(validErrors, null, 2)};
`;
}

function main() {
  const { yamlFiles } = prepareYamlInputs(
    import.meta.url,
    process.argv,
    findYamlFiles,
    'Usage: node scripts/gen_errors_data.js <path_to_found_errors> <output_path>'
  );
  
  const outputPathArg = process.argv[3];
  if (!outputPathArg) {
    console.error('Usage: node scripts/gen_errors_data.js <path_to_found_errors> <output_path>');
    process.exit(1);
  }
  
  const outputFile = path.join(process.cwd(), '..', outputPathArg);
  
  const errors = [];
  for (const filePath of yamlFiles) {
    console.log(`Parsing: ${filePath}`);
    const error = parseYamlFile(filePath);
    if (error) {
      errors.push(error);
    }
  }
  
  console.log(`Successfully parsed ${errors.length} error files`);
  
  const tsContent = generateTypeScriptContent(errors);
  
  // Ensure the output directory exists
  const outputDir = path.dirname(outputFile);
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }
  
  fs.writeFileSync(outputFile, tsContent);
  console.log(`Generated TypeScript file: ${outputFile}`);
  console.log('Script completed successfully!');
}

main();